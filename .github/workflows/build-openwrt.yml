name: Build OpenWrt

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight UTC
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Ho_Chi_Minh

jobs:
  build:
    runs-on: ubuntu-24.04
    if: github.event.repository.fork == false
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Install dependencies
        run: |
          sudo -E apt-get update
          sudo -E apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget ccache

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.19
        if: inputs.ssh == 'true' || github.event_name == 'workflow_dispatch'
        with:
          limit-access-to-actor: true

      - name: Clone OpenWrt source
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          git checkout $REPO_BRANCH

      - name: Restore ccache
        uses: actions/cache@v4.2.3
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Restore OpenWrt download cache
        uses: actions/cache@v4.2.3
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-openwrt-dl-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-openwrt-dl-

      - name: Update feeds
        run: |
          cd openwrt
          [ -f $GITHUB_WORKSPACE/$DIY_P1_SH ] && bash $GITHUB_WORKSPACE/$DIY_P1_SH
          ./scripts/feeds update -a
          [ -f $GITHUB_WORKSPACE/$DIY_P2_SH ] && bash $GITHUB_WORKSPACE/$DIY_P2_SH
          ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          if [ ! -d openwrt ]; then
            echo "Error: openwrt directory not found"
            exit 1
          fi
          cd openwrt
          echo "Checking for .config at $GITHUB_WORKSPACE/$CONFIG_FILE"
          ls -la $GITHUB_WORKSPACE
          if [ -f $GITHUB_WORKSPACE/$CONFIG_FILE ]; then
            mv $GITHUB_WORKSPACE/$CONFIG_FILE .config || { echo "Error: Failed to move .config"; exit 1; }
            echo "Custom .config loaded successfully."
          else
            echo "Error: Custom .config not found at $GITHUB_WORKSPACE/$CONFIG_FILE"
            exit 1
          fi
          make defconfig || { echo "Error: make defconfig failed"; exit 1; }

      - name: Download package source
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;

      - name: Enable ccache
        run: |
          export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
          export CC="ccache gcc"
          export CXX="ccache g++"
          export PATH="/usr/lib/ccache:$PATH"
          ccache -z

      - name: Build OpenWrt
        run: |
          export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
          export CC="ccache gcc"
          export CXX="ccache g++"
          export PATH="/usr/lib/ccache:$PATH"
          cd openwrt
          make -j$(nproc) || make -j1 V=s

      - name: ccache stats
        run: |
          export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
          ccache -s

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to artifact
        if: steps.organize.outputs.status == 'success' && !cancelled()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          retention-days: 1

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "OpenWrt Build $(date +"%Y-%m-%d %H:%M:%S")" >> release.txt
          echo "GitHub: ${{ github.repository }}" >> release.txt
          echo "Run: ${{ github.run_number }}" >> release.txt

      - name: Upload firmware to release
        if: steps.organize.outputs.status == 'success' && steps.tag.outputs.release_tag != '' && !cancelled()
        uses: softprops/action-gh-release@v2.2.1
        with:
          files: |
            ${{ env.FIRMWARE }}/*
            release.txt
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: OpenWrt Build ${{ steps.tag.outputs.release_tag }}
          body: Automated OpenWrt build completed on ${{ github.event.schedule || github.event.push.created_at || github.event.workflow_dispatch.created_at }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASES_TOKEN }}

      - name: Send Telegram notification
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_ID }} \
            -d text="New OpenWrt build #${{ github.run_number }} - $(date +"%Y.%m.%d") released! Check it at https://github.com/${{ github.repository }}/releases"

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 3

      - name: Delete old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 5
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASES_TOKEN }}

      - name: Save ccache
        if: always()
        uses: actions/cache/save@v4.2.3
        with:
          path: .ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('.config') }}
